//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "slot")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub user_id: Option<i32>,
    pub zone_id: i32,
    pub start_at: DateTime,
    pub end_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::app_user::Entity",
        from = "Column::UserId",
        to = "super::app_user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    AppUser,
    #[sea_orm(
        belongs_to = "super::zone::Entity",
        from = "Column::ZoneId",
        to = "super::zone::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Zone,
}

impl Related<super::app_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AppUser.def()
    }
}

impl Related<super::zone::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Zone.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
